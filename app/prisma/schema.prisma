
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id  Int @default(autoincrement()) @id
  name String
  steamid String @unique
  user_type Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_cargo User_Cargo[]
  @@map(name: "users")
}

model Server {
  id  Int @default(autoincrement()) @id
  name String @unique
  full_name String @unique
  ip String
  port String
  rcon_pass String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_cargos User_Cargo[]
  cargo_server Cargo_Server[]
  @@map(name: "servers")
}

model Cargo{
  id  Int @default(autoincrement()) @id
  stripe_id String @unique
  name String @unique 
  price String
  individual Boolean
  duration String
  currency String @default("BRL")
  flags String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_cargos User_Cargo[]
  cargo_server Cargo_Server[]
  @@map(name: "cargos")
}

model User_Cargo  {
  id  Int @default(autoincrement()) @id
  expire_stamp BigInt
  cargo_id Int
  flags String
  server_name String
  steamid String
  cargo Cargo @relation(fields: [cargo_id], references: [id])
  server Server @relation(fields: [server_name], references: [name])
  user User @relation(fields: [steamid], references: [steamid])
}

model Cargo_Server {
  id  Int @default(autoincrement()) @id
  cargo_id Int
  server_id Int 
  cargo Cargo @relation(fields: [cargo_id], references: [id])
  server Server @relation(fields: [server_id], references: [id])
}

model Log {
  id Int@default(autoincrement()) @id
  activity String
  additional_info String
  created_by String
  created_at DateTime @default(now())
  @@map(name: "logs")
}

model Sale {
  id Int@default(autoincrement()) @id
  gateway String
  customer_steamid String
  payment_status String @default("uncompleted")
  amount String
  currency String? @default("BRL")
  customer_email String?
  additional_info String?
  created_at DateTime @default(now())
  @@map(name: "sales")
}

model NotificationSettings {
  id Int@default(autoincrement()) @id
  send_email_sale Boolean @default(false) //send email after sale status update? (created/fulfilled/rejected)
  send_disc_on_sale Boolean @default(false) //send webhook on discord when a sale is fulfilled?
  send_disc_on_modification Boolean @default(false) //send webhook on discord when a modification happens on website?
  send_discord_notifications Boolean @default(false) //send discord webhooks?
  community_name String @default("")
  community_website String @default("")
  webhook_url String @default("")
  logo_url String @default("")
}